@page "/"
@page "/login"
@using System.ComponentModel.DataAnnotations
@inject AppCursos.Services.UsuarioService usuarios
@inject AppCursos.Services.SesionService sesion
@inject NavigationManager nav

<div class="d-flex justify-content-center">
    <div class="card shadow-sm mt-3" style="width:min(100%,420px);">
        <div class="card-body">

            <!-- LOGO + TÍTULO CENTRADOS -->
            <div class="text-center mb-3">
                <img src="/images/logo.jpg"
                     alt="AppCursos"
                     class="img-fluid"
                     style="width:96px;height:96px;object-fit:contain"
                     onerror="this.onerror=null;this.src='/images/placeholder.png';" />
                <h4 class="mt-2 mb-0">Iniciar sesión</h4>
            </div>

            <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                        <InputText class="form-control" @bind-Value="model.Email" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Contraseña</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>
                        <InputText class="form-control" @bind-Value="model.Password" type="@passwordType" />
                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePassword">
                            <i class="bi @(passwordType == "password" ? "bi-eye" : "bi-eye-slash")"></i>
                        </button>
                    </div>
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox class="form-check-input" @bind-Value="model.Recordarme" />
                    <label class="form-check-label">Recordarme</label>
                </div>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger py-2">@error</div>
                }

                <button class="btn btn-success w-100 mb-3">
                    <i class="bi bi-box-arrow-in-right"></i> Entrar
                </button>
            </EditForm>

            <div class="text-center text-muted mb-2">o</div>

            <button class="btn btn-outline-primary w-100" @onclick="EntrarInvitado">
                <i class="bi bi-person"></i> Entrar como invitado
            </button>

            <div class="mt-3 small d-flex justify-content-between">
                <a href="#" class="text-muted">¿Olvidaste tu contraseña?</a>
                <a href="#" class="text-muted">Crear cuenta</a>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery] public string? returnUrl { get; set; }

    private LoginModel model = new();
    private string? error;
    private string passwordType = "password";

    protected override void OnInitialized()
    {
        if (sesion.EsInvitado)
            sesion.Logout();
    }

    private void TogglePassword() =>
        passwordType = (passwordType == "password") ? "text" : "password";

    private void OnValidSubmit()
    {
        error = null;

        var user = usuarios.ValidarCredenciales(model.Email?.Trim() ?? "", model.Password ?? "");
        if (user is null)
        {
            error = "Email o contraseña incorrectos.";
            return;
        }

        sesion.Login(user);

        var destino = NormalizarReturnUrl(returnUrl);
        nav.NavigateTo(destino);
    }

    private void EntrarInvitado()
    {
        sesion.EntrarComoInvitado();
        nav.NavigateTo("/cursos");
    }

    private static string NormalizarReturnUrl(string? ru)
    {
        if (string.IsNullOrWhiteSpace(ru)) return "/cursos";
        var limpio = ru.Trim();
        var path = limpio.Split('?', 2)[0].TrimEnd('/').ToLowerInvariant();
        if (path == "" || path == "/login" || path == "login") return "/cursos";
        return limpio.StartsWith("/") ? limpio : "/" + limpio;
    }

    private class LoginModel
    {
        [Required, EmailAddress] public string? Email { get; set; }
        [Required, MinLength(3)] public string? Password { get; set; }
        public bool Recordarme { get; set; }
    }
}