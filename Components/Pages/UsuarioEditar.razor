@page "/usuario/editar/{id:int:int}"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using AppCursos.Models
@inject AppCursos.Services.UsuarioService usuarioService
@inject AppCursos.Services.SesionService sesion
@inject NavigationManager nav

<h3>Editar usuario</h3>

@code {
    [Parameter] public int id { get; set; }

    private UsuarioForm? model;
    private Usuario? original;
    private bool cargando = true;
    private bool enviando = false;

    // Ajusta a las imágenes que tengas en wwwroot/images
    private readonly List<string> imagenes = new()
    {
        "images/ana.jpg",
        "images/pedro.jpg",
        "images/laura.jpg"
    };

    protected override void OnInitialized()
    {
        // Guard 1: debe estar logueado
        if (!sesion.EstaLogueado)
        {
            var here = "/" + nav.ToBaseRelativePath(nav.Uri);
            nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(here)}", true);
            return;
        }

        // Guard 2: solo Admin
        if (!string.Equals(sesion.UsuarioActual?.Rol, "Admin", StringComparison.OrdinalIgnoreCase))
        {
            nav.NavigateTo("/usuarios", true);
            return;
        }

        original = usuarioService.ObtenerPorId(id);
        if (original is not null)
        {
            model = new UsuarioForm
            {
                Id = original.Id,
                Nombre = original.Nombre,
                Email = original.Email,
                Contrasena = original.Contrasena,
                Rol = original.Rol,
                ImagenPath = original.ImagenPath
            };
        }
        cargando = false;
    }

    private string Img(string? path)
    {
        var p = (path ?? "").Trim();
        if (string.IsNullOrWhiteSpace(p)) return "/images/placeholder.png";
        if (p[0] != '/') p = "/" + p;
        return p;
    }

    private void Cancelar() => nav.NavigateTo("/usuarios");

    private void OnValidSubmit()
    {
        if (model is null || enviando) return;
        enviando = true;

        var u = new Usuario
        {
            Id = model.Id,
            Nombre = model.Nombre!.Trim(),
            Email = model.Email!.Trim(),
            Contrasena = model.Contrasena!,     // demo (in-memory)
            Rol = model.Rol!,
            ImagenPath = model.ImagenPath!
        };

        usuarioService.Editar(u);
        nav.NavigateTo("/usuarios");
    }

    private class UsuarioForm
    {
        public int Id { get; set; }

        [Required, MinLength(2)]
        public string? Nombre { get; set; }

        [Required, EmailAddress]
        public string? Email { get; set; }

        [Required, MinLength(3)]
        public string? Contrasena { get; set; }

        [Required]
        public string? Rol { get; set; } = "Alumno";

        [Required]
        public string? ImagenPath { get; set; }
    }
}

@if (cargando)
{
    <div class="alert alert-info mt-3">Cargando…</div>
}
else if (original is null || model is null)
{
    <div class="alert alert-danger mt-3">Usuario no encontrado.</div>
    <button class="btn btn-secondary" @onclick="Cancelar">
        <i class="bi bi-arrow-left"></i> Volver
    </button>
}
else
{
    <div class="card mt-3">
        <div class="card-body">

            <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row g-3">
                    <div class="col-12 col-md-8">

                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="model.Nombre" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="model.Email" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <InputText class="form-control" @bind-Value="model.Contrasena" type="password" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rol</label>
                            <InputSelect class="form-select" @bind-Value="model.Rol">
                                <option value="Alumno">Alumno</option>
                                <option value="Admin">Admin</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Imagen</label>
                            <InputSelect class="form-select" @bind-Value="model.ImagenPath">
                                @foreach (var img in imagenes)
                                {
                                    <option value="@img">@Path.GetFileName(img)</option>
                                }
                            </InputSelect>
                            <div class="form-text">Las imágenes deben existir en <code>wwwroot/images</code>.</div>
                        </div>
                    </div>

                    <div class="col-12 col-md-4 d-flex flex-column align-items-center">
                        <img src="@Img(model.ImagenPath)" class="rounded-circle mb-2"
                             style="width:140px;height:140px;object-fit:cover"
                             onerror="this.onerror=null;this.src='/images/placeholder.png';" />
                        <span class="text-muted small">@model.ImagenPath</span>
                    </div>
                </div>

                <div class="mt-3 d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                        <i class="bi bi-arrow-left"></i> Volver
                    </button>
                    <button class="btn btn-primary" disabled="@enviando">
                        <i class="bi bi-save"></i> Guardar
                    </button>
                </div>
            </EditForm>

        </div>
    </div>
}